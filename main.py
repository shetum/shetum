import asyncio
import pandas as pd
import numpy as np
import time
import datetime
import os
import aiogram
from aiogram import Bot, Dispatcher, types, filters, executor
from config import TOKEN
from asyncio import sleep
import matplotlib.pyplot as plt
import tracemalloc
from portfel import Portfel
import random, asyncio

import STICKER_PACK as SP

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

stock_dict = {}

# Set up aiogram
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot = bot, storage = storage)

users_username = {} #—Å–ª–æ–≤–∞—Ä—å –Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_balance = {} #—Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
users_level = {} #—Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_bet_state = {} #—Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å—Ç–∞–≤–∫–∏
slots_bet = {} #—Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å—Ç–∞–≤–æ–∫ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState(StatesGroup):
    waiting_for_bet = State()
    waiting_for_bet_slots = State()
    waiting_for_slot = State()
    waiting_for_edit = State()
    waiting_for_buy = State()
    waiting_for_sell = State()

# Set up simulation parameters
os.chdir(r'F:\python_vsCode\fin_bot')
price_one = 100
price_two = 100
price_three = 100

timka_id = -1001853288680 #440487792
chatik_id = -955163522

jackpot = 1_000

tes = 0
tes_q = 0
sber4days = 0
yndx4days = 0
tsla4days = 0

def high_change(l, s):
    return np.random.normal(loc=l, scale=s)

async def send_message():
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
    now = datetime.datetime.now().strftime('%H:%M:%S')
    message = f"–°–µ–π—á–∞—Å {now}"
    msg = await bot.send_message(chat_id=message.chat.id, text=message)
    while True:
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        now = datetime.datetime.now().strftime('%H:%M:%S')
        message = f"–°–µ–π—á–∞—Å {now}"
        await bot.edit_message_text(chat_id=message.chat.id, message_id=msg.message_id, text=message)
        await asyncio.sleep(2)  # 5 –º–∏–Ω—É—Ç

# Define task to simulate stock prices and save to CSV
async def simulate_stock_prices():
    global stock_data, price_one, price_two, price_three, tes, sber4days, yndx4days, tsla4days, tes_q
    stock_data = pd.DataFrame(columns=['date', 'SBER', 'YNDX','TSLA'])
    pd.set_option('display.float_format', lambda x: '{:.5f}'.format(x))

    counter = 0
    tick = 1
    q = 90
    while True:
        tracemalloc.start()

        if counter == 360:
            # tes = np.random.choice(a = [-15,-10,-6,-2,2,6,10,15], p = [2,3,8,12,15,41,15,4])
            tes = np.random.normal(loc = 6, scale = 5)
            tes_q = tes ** (1 / 4)

        if q == 90:
            sber4days = np.random.normal(loc = tes_q, scale = 0.1)
            yndx4days = np.random.normal(loc = tes_q, scale = 0.15)
            tsla4days = np.random.normal(loc = tes_q, scale = 0.2)

        price_change_SBER = round(np.random.normal(sber4days, 0.001) * 0.01, 3)
        price_change_YNDX = round(np.random.normal(yndx4days, 0.002) * 0.01, 3)
        price_change_TSLA = round(np.random.normal(tsla4days, 0.003) * 0.01, 3)

        price_SBER = round(price_one * (1 + price_change_SBER), 5)      
        price_YNDX = round(price_two * (1 + price_change_YNDX), 5) 
        price_TSLA = round(price_three * (1 + price_change_TSLA), 5) 

        new_row = pd.DataFrame({'date': tick, 'SBER': price_SBER, 'YNDX': price_YNDX, 'TSLA': price_TSLA}, index=[0])
        stock_data = pd.concat([stock_data, new_row]).reset_index(drop=True)

        price_one = price_SBER
        price_two = price_YNDX
        price_three = price_TSLA

        # Save the DataFrame to CSV
        stock_data.to_csv('stock_data.csv', index=False, sep='\t')
        await asyncio.sleep(0.1)
        counter += 1
        tick += 1
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        current, peak = tracemalloc.get_traced_memory()
        print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {current / 10**6} –ú–ë, –ø–∏–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {peak / 10**6} –ú–ë | {tes}")
        tracemalloc.stop()
        
# Start the stock price simulation
loop = asyncio.get_event_loop()
task = loop.create_task(simulate_stock_prices())

# Define handler for the /start command
HELP_INFO ="""
–í —ç—Ç–æ–º –±–æ—Ç–µ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å <b>–Ω–ï—Ä–µ–ê–ª—å–Ω—ã–ô–µ</b> –±–∞–ø–∫–∏ ü§ëüí∏üí∞
–ü–†–û–°–¢–û –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–≤–æ–µ–π <em>–ë–∞–Ω–∫–æ–≤–°–ö–û–π –ö–ê—Ä—Ç—ã</em> —Å –¥–≤—É—Ö —Å—Ç–∞—Ä–æ–Ω!
—Å–ø–∞—Å–∏–±–æ ü•∫\n
<b>/game</b> - –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å
<b>/shop</b> - –º–∞–≥–∞–∑–∏–Ω—á–∏–∫
<b>/kazik</b> - —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9 (—Ö3)
<b>/slots</b> - –æ–¥–Ω–æ—Ä—É–∫–∏–π –±–∞–Ω–¥–∏—Ç
<b>/top</b> - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
<b>/balance</b> - –±–∞–ª–∞–Ω—Å
<b>/grafik<b> - –≥—Ä–∞—Ñ–∏–∫

"""
url = 'https://cdn.fishki.net/upload/post/2018/01/02/2473934/1-015.jpg'

sticker = 'CAACAgIAAxkBAAEImvNkO-IjNFog5gFHs7CCOu4pX2KVkAACbCEAAtt0aUmFco3TMQyV2C8E'

def cb_inline_keyboard() -> InlineKeyboardMarkup:
    ikb = InlineKeyboardMarkup(inline_keyboard = [
        [InlineKeyboardButton('+1', callback_data = 'btn_increase'), InlineKeyboardButton('-1', callback_data = 'btn_decrease')],
    ])
    return ikb

async def reg(user_id, message):
    if user_id not in users_balance:
        users_balance[user_id] = 10_000
        users_level[user_id] = 1
        users_username[user_id] = message.from_user.username
    else:
        pass

async def delete_message(message: types.Message, delay: int):
    try:
        await asyncio.sleep(delay)
        await message.delete()
    except Exception as ex:
        pass

#################################################################################
@dp.message_handler(commands = ['start', 'help'])
async def start_cmd(message: types.Message):
    first = await bot.send_photo(message.chat.id, url)
    second = await bot.send_sticker(message.chat.id, sticker)
    await bot.send_message(message.chat.id, HELP_INFO, parse_mode = 'HTML')
    await delete_message(first, 3)
    await delete_message(second, 1)
    await message.delete()

@dp.message_handler(commands = 'game')
async def game_command(message: types.Message):
    user_id = message.from_user.id
    await reg(user_id = user_id, message = message)

    await message.answer(f'–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω—è—Ö = {users_balance[user_id]}', reply_markup = cb_inline_keyboard())
    await message.delete()

@dp.message_handler(Text(equals=["–æ—Ç–º–µ–Ω–∞","cancel", '—Ö–≤–∞—Ç–∏—Ç'], ignore_case=True), state=UserState.states)
async def cancel(message: types.Message, state: FSMContext):
    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.finish()
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
    s = await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    # users_bet_state[message.from_user.id] = 0
    await asyncio.sleep(3)
    await message.delete()
    await delete_message(s,2)

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('btn'))
async def cb_counter(callback: types.CallbackQuery):
    ### –ù–ê–î–û –°–î–ï–õ–ê–¢–¨ –ö–ê–ö –° –ú–ê–ì–ê–ó–ò–ù–û–ú, –ß–¢–û–ë–´ –ó–ê–ö–†–´–í–ê–õ–û–°–¨ –ü–û–°–õ–ï –ù–ê–ñ–ê–¢–ò–Ø, –õ–ò–ë–û –ß–¢–û_–¢–û –ü–†–ò–î–£–ú–ê–¢–¨
    user_id = callback.from_user.id
    
    if callback.data == 'btn_increase':
        users_balance[user_id] += 1 * users_level[user_id]
        await callback.answer('–∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –±–∞–±–ª–∏—à–∫–æ')
        s = await callback.message.edit_text(f'–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω—è—Ö = {users_balance[user_id]}', reply_markup = cb_inline_keyboard())
        await delete_message(callback.message, 30)
    elif callback.data == 'btn_decrease':
        users_balance[user_id] -= 1 * users_level[user_id]
        await callback.answer('–∑–∞–ü–õ–û–¢–∏–ª–∏ –Ω–∞–ª–æ–≥–∏')
        photo = await bot.send_photo(callback.message.chat.id,'https://i.pinimg.com/originals/b1/b4/53/b1b453f34bcfc6c9057bc8665f785686.jpg')
        s = await callback.message.edit_text(f'–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω—è—Ö = {users_balance[user_id]}', reply_markup = cb_inline_keyboard())
        await delete_message(photo, 1)
        await delete_message(callback.message, 30)

def cb_keyboard_shop() -> InlineKeyboardMarkup:
    ikb = InlineKeyboardMarkup(inline_keyboard = [
        [InlineKeyboardButton('–£–ª—É—á—à–∏—Ç—å –∫–Ω–æ–ø–∫—É', callback_data = 'upgrade')],
    ])
    return ikb

@dp.message_handler(commands = 'shop')
async def shop_cmd(message: types.Message):
    user_id = message.from_user.id
    await reg(user_id = user_id, message = message)
    await bot.send_message(message.chat.id, f'–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ–Ω—å–≥–∏ –∫–æ–Ω–µ—á–Ω–æ üòÖ\n –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_balance[message.from_user.id]}\n –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {users_level[message.from_user.id]}',
                           reply_markup = cb_keyboard_shop())
    await message.delete()

@dp.callback_query_handler(text = 'upgrade')
async def shop_cb(callback: types.CallbackQuery):

    if users_balance[callback.from_user.id] < 10:
        await callback.answer('–Ω–µ–º–∞ –¥–µ–Ω–µ—Ö –¥—Ä—É–∂–∏—â–µ, —Ç–µ–±–µ –Ω–∞–¥–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â—ë')
        await callback.message.delete()
        s = await bot.send_message(callback.message.chat.id, f'–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ–Ω—å–≥–∏ –∫–æ–Ω–µ—á–Ω–æ üòÖ\n –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_balance[callback.from_user.id]}\n –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {users_level[callback.from_user.id]}', reply_markup = cb_keyboard_shop())
        await delete_message(s, 5)
    else:
        users_level[callback.from_user.id] += 1
        users_balance[callback.from_user.id] -= 10
        await callback.answer('–£—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—à–µ–Ω')
        await callback.message.delete()
        s = await bot.send_message(callback.message.chat.id, f'–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ–Ω—å–≥–∏ –∫–æ–Ω–µ—á–Ω–æ üòÖ\n –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_balance[callback.from_user.id]}\n –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {users_level[callback.from_user.id]}', reply_markup = cb_keyboard_shop())
        await delete_message(s,5)

@dp.message_handler(commands = 'kazik')
async def kazik_cmd(message: types.Message):
    user_id = message.from_user.id
    users_bet_state[user_id] = True
    await reg(user_id = user_id, message = message)

    await UserState.waiting_for_bet.set()
    await bot.send_message(message.chat.id, f'–ö–∞–∫—É—é —Å—É–º–º—É –ø–æ—Å—Ç–∞–≤–∏—Ç—å? \n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {users_balance[user_id]}\n–ü–æ—Å–ª–µ —Å—É–º–º—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —É–∫–∞–∂–∏ —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 9\n–ü—Ä–∏–º–µ—Ä:\n100 7 \n\n* –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã –Ω–∞–ø–∏—à–∏ "–æ—Ç–º–µ–Ω–∞" –≤ —á–∞—Ç–∏–∫')

@dp.message_handler(state=UserState.waiting_for_bet)
async def get_bet(message: types.Message, state: FSMContext):
    user_id = message.from_user.id


    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        amount = [int(i) for i in message.text.split(' ')]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
        if all(isinstance(i, int) for i in amount):
            # –ï—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —è–≤–ª—è—é—Ç—Å—è —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
            pass
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            raise ValueError()
    except ValueError:
        await bot.send_message(message.chat.id, '–°—É–º–º—É –∏ —Å—Ç–∞–≤–∫—É —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏ (—Ü–µ–ª—ã–º–∏)')
        return '–Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ'


    if amount[0] > users_balance[user_id]:
        await bot.send_message(message.chat.id, '–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω—è—Ö')
    elif amount[0] <= 0:
        await bot.send_message(message.chat.id, '–±–æ–ª—å—à–µ 0 —á–∏—Å–ª–æ')
    else:
        await bot.send_message(message.chat.id, f'–Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É! \n–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {amount[0]} –Ω–∞ {amount[1]}')
        await sleep(1)
        r = random.randint(0,9)
        await bot.send_message(message.chat.id, f'–±–æ—Ç –≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç {r}')
        if r == amount[1]:
            users_balance[user_id] += amount[0] * 3
            await bot.send_message(message.chat.id, f'–ø–æ–∑–¥—Ä–∞–≤–ª—è—é –≤–∞—à –≤—ã–∏–≥—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª: {amount[0] * 3} \n–í–∞—à –±–∞–ª–∞–Ω—Å: {users_balance[user_id]} \n\n* –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã –Ω–∞–ø–∏—à–∏ "–æ—Ç–º–µ–Ω–∞" –≤ —á–∞—Ç–∏–∫')
        else:
            users_balance[user_id] -= amount[0]
            await bot.send_message(message.chat.id, f'–∫–∞–∂–µ—Ç—Å—è –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏(( \n–í–∞—à –±–∞–ª–∞–Ω—Å: {users_balance[user_id]} \n\n* –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã –Ω–∞–ø–∏—à–∏ "–æ—Ç–º–µ–Ω–∞" –≤ —á–∞—Ç–∏–∫')

    # –∫–æ–Ω–µ—Ü        

@dp.message_handler(commands = 'top')
async def top_cmd(message: types.Message):
    user_id = message.from_user.id
    df = pd.DataFrame(list(zip(users_username.values(), users_balance.values(), users_level.values())), index=users_username.values(), columns=['username', 'balance', 'level'])
    await reg(user_id = user_id, message = message)
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ HTML —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
    html_table = df.style.set_properties(**{"text-align": "center"}).render()

    # —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –≤ —Ñ–∞–π–ª
    fig, ax = plt.subplots(figsize=(8, 1))
    ax.axis("off")
    ax.axis("tight")
    ax.table(cellText=df.values, colLabels=df.columns, loc="center", cellLoc='center')
    plt.savefig("table.png")

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–±–ª–∏—Ü–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    with open("table.png", "rb") as photo:
        await message.answer_photo(photo)

@dp.message_handler(commands = ['balance'])
async def balance_cmd(message: types.Message):
    await message.answer(users_balance[message.from_user.id])

@dp.message_handler(commands = ['slots'])
async def slots_cmd(message: types.Message):
    user_id = message.from_user.id
    await reg(user_id = user_id, message = message)
    await message.answer(f'–ë—É—Ä–º–∞–ª–¥–∞\n\n–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π —Å–≤–æ—é —Å—Ç–∞–≤–∫—É, –∑–∞—Ç–µ–º –∫—Ä—É—Ç–∏ –±–∞—Ä–∞–±–∞–Ω\n\n–ë–∞–ª–∞–Ω—Å: {users_balance[user_id]}')
    await UserState.waiting_for_bet_slots.set()
    await message.delete()


@dp.message_handler(state=UserState.waiting_for_bet_slots)
async def bet_for_slots(message: types.Message, state: FSMContext):
    user_bet = message.text

    try:
        user_bet = int(user_bet)
        if isinstance(user_bet, int) and user_bet > 0 and user_bet <= users_balance[message.from_user.id]:
            await state.finish()
            slots_bet[message.from_user.id] = user_bet
            await message.answer(f'–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {user_bet}, –∫—Ä—É—Ç–∏—Ç–µ –±–∞—Ä–∞–±–∞–Ω\n\n–ë–∞–ª–∞–Ω—Å{users_balance[message.from_user.id]}')
            await UserState.waiting_for_slot.set()
            pass
        else:
            if user_bet > users_balance[message.from_user.id]:
                await message.answer(f'–∫–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥\n\n–ë–∞–ª–∞–Ω—Å: {users_balance[message.from_user.id]}')
            else:
                await message.reply(f'–≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)\n\n–ë–∞–ª–∞–Ω—Å{users_balance[message.from_user.id]}')

    except Exception as ex:
        await message.reply(f'–≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)\n\n–ë–∞–ª–∞–Ω—Å{users_balance[message.from_user.id]}')

    
@dp.message_handler(content_types=types.ContentType.DICE, state = UserState.waiting_for_slot)
async def slot_cmd(message: types.Message, state: FSMContext):
    global jackpot
    amount = slots_bet[message.from_user.id]
    msg_number = message.dice.value
    user_id = message.from_user.id
    if amount <= users_balance[user_id]:
        if msg_number in [1,22,43]:
            win_amount = amount * 20
            users_balance[user_id] += win_amount
            s = await message.answer(f'–í—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª: {win_amount} \n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_balance[user_id]}\n\n–¢–µ–∫—É—â–∏–π –¥–∂–µ–∫–ø–æ—Ç: {jackpot}')
            await asyncio.sleep(3)
            await message.delete()
            await delete_message(s, 1)
            
        elif msg_number == 64:
            win_amount = jackpot
            users_balance[user_id] += win_amount
            jackpot = 0
            j = await bot.send_sticker(message.chat.id, random.choice(SP.STICKER_ARTHAS_jackpot))
            s = await message.answer(f'–î–∂–µ–∫–ø–æ—Ç!!!\n\n–í—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª: {win_amount} \n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_balance[user_id]}\n\n–¢–µ–∫—É—â–∏–π –¥–∂–µ–∫–ø–æ—Ç: {jackpot}')
            await asyncio.sleep(3)
            await message.delete()
            await delete_message(j,2)
            await delete_message(s,1)
            
        else:
            jackpot += amount * 10
            users_balance[user_id] -= amount
            l = await bot.send_sticker(message.chat.id, random.choice(SP.STICKER_NO_MONEY))
            s = await message.answer(f'–ù–µ—É–¥–∞—á–∞\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_balance[user_id]}\n\n–¢–µ–∫—É—â–∏–π –¥–∂–µ–∫–ø–æ—Ç: {jackpot}')
            await asyncio.sleep(3)
            await message.delete()
            await delete_message(l, 2)
            await delete_message(s, 1)
    else:
        s = await message.answer(f'–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±–æ–ª—å—à–µ –∑–æ–ª–æ—Ç–∞!\n\n–ë–∞–ª–∞–Ω–∞: {users_balance[message.from_user.id]}')
        await delete_message(s, 2)



@dp.message_handler(commands = 'id')
async def id_id(message: types.Message):
    await message.answer(message.chat.id)
    user_portfel = {
        message.from_user.id : 0,
        'SBER' : 0,
        'YNDX' : 0,
        'TSLA' : 0
    }
# Define handler for all other commands
@dp.message_handler(commands = 'grafik')
async def default_handler(message: types.Message):   
    tracemalloc.start()
    # –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞
    stock_data = pd.read_csv('stock_data.csv', sep='\t')
    n = message.text.split(' ')
    n = int(n[-1])
    stock_data = stock_data.tail(n)

    # –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–∞—Ç—ã, —Ç–∞–∫ –∫–∞–∫ –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–µ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    dates = stock_data['date']
    stock_data.drop('date', axis=1, inplace=True)


    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig, ax = plt.subplots()
    ax.plot(dates, stock_data['SBER'],   label=f'–ì–ª–µ–ë–∞–Ω–∫      |{stock_data.iloc[-1, 0]}')
    ax.plot(dates, stock_data['YNDX'], label=f'–ê—Ä—Å–ë–∞–Ω–∫ |{stock_data.iloc[-1, 1]}')
    ax.plot(dates, stock_data['TSLA'],  label=f'–¢–∏–º–∫–æ—Ñ—Ñ        |{stock_data.iloc[-1, 2]}')
    ax.set_xlabel('–î–∞—Ç–∞')
    ax.set_ylabel('–¶–µ–Ω–∞ –∞–∫—Ü–∏–∏')
    ax.set_title('–ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –∞–∫—Ü–∏–π')
    ax.legend()
    # –£–±–∏—Ä–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–∏ X
    ax.set_xticks([])
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.savefig('fig.png')
    photo = open('fig.png', 'rb') # –∑–¥–µ—Å—å —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ñ–æ—Ç–æ
    await bot.send_photo(chat_id=message.chat.id, photo=types.InputFile(photo), caption='') # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–µ —Å –ø–æ–¥–ø–∏—Å—å—é
    photo.close()
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    current, peak = tracemalloc.get_traced_memory()
    print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {current / 10**6} –ú–ë, –ø–∏–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {peak / 10**6} –ú–ë")
    tracemalloc.stop()

TICKERS_INFO = """
SBER - –°–±–µ—Ä–±–∞–Ω–∫
YNDX - –Ø–Ω–¥–µ–∫—Å
TSLA - –¢–µ—Å–ª–∞
"""

@dp.message_handler(commands = 'tes')
async def buy_cmd(message: types.Message):
    await bot.send_message(message.chat.id, TICKERS_INFO)
    await bot.send_message(message.chat.id, '[-2; 2]')
    await UserState.waiting_for_edit.set()

@dp.message_handler(state=UserState.waiting_for_edit)
async def get_buy_info(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    global tes
    tes = int(message.text)
    await state.finish()

sber = Portfel("SBER")
yndx = Portfel("YNDX")
tsla = Portfel("TSLA")

def get_price(symbol):
    stock_data = pd.read_csv('stock_data.csv', sep='\t')
    price = stock_data[f'{symbol}'].values[-1]
    return price

stocks = {
    "SBER" : Portfel(symbol = "SBER"),
    "YNDX" : Portfel(symbol = "YNDX"),
    "TSLA" : Portfel(symbol = "TSLA")
}

@dp.message_handler(commands = 'buy')
async def buy_cmd(message: types.Message):
    user_id = message.from_user.id
    z = message.text.split(' ')
    q = int(z[2])
    stock_name = z[1].upper()
    p = get_price(stock_name)
    if users_balance[user_id] >= p * q:
        stocks[f"{stock_name}"].buy_share(user_id = user_id, quantity = q, price = p)
        stocks[f"{stock_name}"].get_info(user_id)
        users_balance[user_id] -= p * q
        await message.answer(f"–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!\n{q} –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ {stock_name} –±—ã–ª–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ –ø–æ —Ü–µ–Ω–µ {p}\n–ë–∞–ª–∞–Ω—Å: {round(users_balance[user_id], 3)}")
    elif users_balance[user_id] < p * q:
        await message.answer('–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥')
    else:
        await message.answer('–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞')

        
@dp.message_handler(commands = 'sell')
async def buy_cmd(message: types.Message):
    user_id = message.from_user.id
    z = message.text.split(' ')
    q = int(z[2])
    stock_name = z[1].upper()
    p = get_price(stock_name)
    if q <= sum(stocks[f"{stock_name}"].symbol[user_id]['quantity']):
        stocks[f"{stock_name}"].sell_share(user_id = user_id, quantity = q, price = p)
        users_balance[user_id] += p * q
        await message.answer(f"–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!\n{q} –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ {stock_name} –±—ã–ª–æ –ø—Ä–æ–¥–∞–Ω–æ –ø–æ —Ü–µ–Ω–µ {p}\n–ë–∞–ª–∞–Ω—Å: {round(users_balance[user_id], 3)}")
    else:
        await message.answer('–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ü–∏–π')


@dp.message_handler(commands = 'z')
async def lol_cmd(message: types.Message):
    user_id = message.from_user.id
    z = message.text.split(' ')
    q = int(z[2])
    stock_name = z[1].upper()
    p = get_price(stock_name)
    print(stocks[f"{stock_name}"].symbol[user_id]['quantity'])
    print(sum(stocks[f"{stock_name}"].symbol[user_id]['quantity']))




if __name__ == '__main__':
    # Start the aiogram bot
    executor.start_polling(dp, skip_updates=True)



#